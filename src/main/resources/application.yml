server:
  port: 8080
  servlet:
    multipart:
      max-file-size: 20GB
      max-request-size: 20GB
  connection-timeout: 600000  # 10 minutes for large file uploads on limited bandwidth
  max-http-header-size: 64KB
  tomcat:
    threads:
      max: 50          # Optimized for 2-core CPU
      min-spare: 10
    connection-timeout: 600000
    max-connections: 200  # Conservative for 8GB RAM
    accept-count: 100

spring:
  application:
    name: file-hosting-app
  
  datasource:
    url: jdbc:h2:file:./data/filehosting
    driverClassName: org.h2.Driver
    username: sa
    password: 
  
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: false
    
  h2:
    console:
      enabled: true
      path: /h2-console
        thymeleaf:
    cache: false
    prefix: classpath:/templates/
    suffix: .html
    # Additional configuration for large file handling
  http:
    multipart:
      enabled: true
      file-size-threshold: 50MB  # Increased threshold for NVMe SSD performance
      location: ${java.io.tmpdir}  # Temporary file location
  
  # JPA optimizations for limited resources
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
        connection:
          pool_size: 10  # Conservative pool size for 8GB RAM

# Custom application properties
app:
  upload:
    path: ${UPLOAD_PATH:./uploads}
    max-size-gb: ${MAX_STORAGE_GB:120}  # Use ~75% of 160GB NVMe for uploads (leaving space for OS, app, temp files)
  
logging:
  level:
    com.filehosting: DEBUG
    org.springframework.web.multipart: DEBUG
